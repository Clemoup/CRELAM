# Nom du workflow tel qu'il apparaîtra dans l'onglet "Actions"
name: Déploiement GitHub Pages CRELAM

# Quand le workflow doit-il s'exécuter ?
on:
# Supprimez ou commentez la section 'push' car nous allons déclencher manuellement
  # push:
  #   branches:
  #     - main

  # Permettre de lancer le workflow manuellement depuis l'onglet "Actions"
  workflow_dispatch:
  inputs:
      fileName:
        description: 'Nom du fichier HTML à déployer'
        required: true
        type: string
      fileContent:
        description: 'Contenu du fichier HTML (Base64)'
        required: true
        type: string

# Gérer la concurrence : permet d'éviter les annulations automatiques.
# Si un nouveau push arrive alors qu'une exécution est en cours pour cette branche,
# le nouveau push attendra que l'ancien soit terminé.
# Si vous voulez que le plus récent annule l'ancien, ajoutez 'cancel-in-progress: true'
# mais ce n'est pas le comportement que vous voulez ici pour éviter les annulations.
concurrency:
  group: pages
  # cancel-in-progress: false # Par défaut false si non spécifié, mais on peut le mettre pour être explicite

# Les différents jobs (tâches) qui composent ce workflow
jobs:
  # Le job de construction et de déploiement
  build-and-deploy:
    runs-on: ubuntu-latest # Environnement d'exécution
    permissions:
      contents: write # Permission pour lire le contenu du dépôt
      pages: write # Permission pour déployer sur GitHub Pages
      id-token: write # Permission requise pour l'authentification OIDC de deploy-pages@v4

    steps:
      # Étape 1: Cloner le dépôt
      - name: Checkout your repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important pour des dépôts plus complexes avec l'historique

      # Étape 2: Configurer Pages (nécessaire pour les actions de déploiement)
      - name: Create or Update HTML file
        run: |
          echo "${{ inputs.fileContent }}" | base64 -d > "${{ inputs.fileName }}"
          # Crée le fichier depuis le contenu base64 reçu
        shell: bash

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Étape 3: Uploader l'artefact (votre site HTML)
      # 'path' doit pointer vers le dossier qui contient vos fichiers HTML à déployer
      # Si vos fichiers HTML sont directement à la racine du dépôt, utilisez '.'
      # Si ils sont dans un sous-dossier 'site' (par exemple), utilisez 'site'
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: . # <-- Très important : remplacez '.' par le chemin de votre dossier HTML si ce n'est pas la racine

      # Étape 4: Déployer l'artefact vers GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
       # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Cette ligne n'est plus nécessaire avec le bloc permissions ci-dessus
